{"version":3,"sources":["app.module.css","image.jpg","form.module.css","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","state","name","password","isVisible","changeHandle","e","setState","target","value","toggle","className","styles","card","container","imageWrapper","src","image","alt","width","title","header","labeldiv1","label","input","type","onChange","this","placeholder","labeldiv2","eye","onClick","color","icon","faEye","faEyeSlash","signedwrapper","link","href","signinbtn","hr","register","React","Component","App","appStyles","app","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,IAAM,mB,mBCDxBD,EAAOC,QAAU,IAA0B,mC,sDCC3CD,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,KAAO,mBAAmB,MAAQ,oBAAoB,OAAS,qBAAqB,MAAQ,oBAAoB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,cAAgB,4BAA4B,UAAY,wBAAwB,GAAK,iBAAiB,IAAM,kBAAkB,aAAe,2BAA2B,SAAW,uBAAuB,KAAO,qB,0LCMtcC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,SAAU,GACVC,WAAW,G,EAGbC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAON,KAAOI,EAAEE,OAAOC,S,EAG9BC,OAAS,WACP,EAAKH,SAAS,CACZH,WAAY,EAAKH,MAAMG,a,uDAIzB,OACE,yBAAKO,UAAWC,IAAOC,MACrB,yBAAKF,UAAWC,IAAOE,WACrB,yBAAKH,UAAWC,IAAOG,cACrB,yBAAKC,IAAKC,IAAOC,IAAI,GAAGC,MAAM,SAEhC,wBAAIR,UAAWC,IAAOQ,OAAtB,YACA,uBAAGT,UAAWC,IAAOS,QAArB,WAEA,yBAAKV,UAAWC,IAAOU,WACrB,2BAAOX,UAAWC,IAAOW,OAAzB,0BACA,2BACEZ,UAAWC,IAAOY,MAClBC,KAAK,OACLvB,KAAK,OACLwB,SAAUC,KAAKtB,aACfuB,YAAY,WACZnB,MAAOkB,KAAK1B,MAAMC,QAGtB,yBAAKS,UAAWC,IAAOiB,WACrB,2BAAOlB,UAAWC,IAAOW,OAAzB,YACA,2BACEZ,UAAWC,IAAOY,MAClBC,KAAME,KAAK1B,MAAMG,UAAY,OAAS,WACtCF,KAAK,WACLwB,SAAUC,KAAKtB,aACfuB,YAAY,WACZnB,MAAOkB,KAAK1B,MAAME,WAEpB,0BAAMQ,UAAWC,IAAOkB,IAAKC,QAASJ,KAAKjB,QACxC,IACAiB,KAAK1B,MAAMG,UACV,kBAAC,IAAD,CAAiB4B,MAAM,QAAQC,KAAMC,MAErC,kBAAC,IAAD,CAAiBF,MAAM,OAAOC,KAAME,QAI1C,yBAAKxB,UAAWC,IAAOwB,eACrB,uBAAGzB,UAAWC,IAAOyB,KAAMC,KAAK,KAAhC,mBACA,4BAAQ3B,UAAWC,IAAO2B,WAA1B,aAEF,wBAAI5B,UAAWC,IAAO4B,KACtB,yBAAK7B,UAAWC,IAAO6B,UACrB,yDACA,uBAAG9B,UAAWC,IAAOyB,KAAMC,KAAK,KAAhC,wBAEF,6BACE,yDACA,uBAAG3B,UAAWC,IAAOyB,KAAMC,KAAK,KAAhC,qB,GApEsBI,IAAMC,WCFzB,SAASC,IACtB,OACE,yBAAKjC,UAAWkC,IAAUC,KACxB,kBAAC,EAAD,OCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.16f15b70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__cewju\"};","module.exports = __webpack_public_path__ + \"static/media/image.dccff639.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"form_title__1UrKL\",\"card\":\"form_card__J2yjE\",\"label\":\"form_label__4HdUQ\",\"header\":\"form_header__29Miw\",\"input\":\"form_input__w5D0Y\",\"container\":\"form_container__20MDS\",\"labeldiv1\":\"form_labeldiv1__WI79Z\",\"labeldiv2\":\"form_labeldiv2__C1fRZ\",\"signedwrapper\":\"form_signedwrapper__3k-0Y\",\"signinbtn\":\"form_signinbtn__1x_tW\",\"hr\":\"form_hr__3G4Ky\",\"eye\":\"form_eye__1oDPS\",\"imageWrapper\":\"form_imageWrapper__2DB4N\",\"register\":\"form_register__2SK7u\",\"link\":\"form_link__3c81H\"};","import React from \"react\";\nimport styles from \"./form.module.css\";\nimport image from './image.jpg'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport { faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nexport default class Form extends React.Component {\n  state = {\n    name: \"\",\n    password: \"\",\n    isVisible: false,\n  };\n\n  changeHandle = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n  toggle = () => {\n    this.setState({\n      isVisible: !this.state.isVisible,\n    });\n  };\n  render() {\n    return (\n      <div className={styles.card}>\n        <div className={styles.container}>\n          <div className={styles.imageWrapper}>\n            <img src={image} alt=\"\" width=\"100\"/>\n          </div>\n          <h1 className={styles.title}>Worksana</h1>\n          <p className={styles.header}>Sign in</p>\n\n          <div className={styles.labeldiv1}>\n            <label className={styles.label}>Email Address/Username</label>\n            <input\n              className={styles.input}\n              type=\"text\"\n              name=\"name\"\n              onChange={this.changeHandle}\n              placeholder=\"username\"\n              value={this.state.name}\n            />\n          </div>\n          <div className={styles.labeldiv2}>\n            <label className={styles.label}>Password</label>\n            <input\n              className={styles.input}\n              type={this.state.isVisible ? \"text\" : \"password\"}\n              name=\"password\"\n              onChange={this.changeHandle}\n              placeholder=\"password\"\n              value={this.state.password}\n            />\n            <span className={styles.eye} onClick={this.toggle}>\n              {\" \"}\n              {this.state.isVisible ? (\n                <FontAwesomeIcon color=\"black\" icon={faEye} />\n              ) : (\n                <FontAwesomeIcon color=\"teal\" icon={faEyeSlash} />\n              )}\n            </span>\n          </div>\n          <div className={styles.signedwrapper}>\n            <a className={styles.link} href=\"/\">Forgot Password</a>\n            <button className={styles.signinbtn}>Sign in </button>\n          </div>\n          <hr className={styles.hr} />\n          <div className={styles.register}>\n            <span>Don't have an account? </span>\n            <a className={styles.link} href=\"/\">Start my free trial</a>\n          </div>\n          <div>\n            <span>looking for the kiosk? </span>\n            <a className={styles.link} href=\"/\">Click here</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport appStyles from \"./app.module.css\";\nimport \"./index.css\";\nimport Form from \"./Form\";\n\nexport default function App() {\n  return (\n    <div className={appStyles.app}>\n      <Form />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}